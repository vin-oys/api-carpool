// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type Category string

const (
	CategoryAdult Category = "adult"
	CategoryChild Category = "child"
)

func (e *Category) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Category(s)
	case string:
		*e = Category(s)
	default:
		return fmt.Errorf("unsupported scan type for Category: %T", src)
	}
	return nil
}

type NullCategory struct {
	Category Category
	Valid    bool // Valid is true if Category is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategory) Scan(value interface{}) error {
	if value == nil {
		ns.Category, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Category.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Category), nil
}

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type UserRole string

const (
	UserRoleSuperAdministrator UserRole = "super_administrator"
	UserRoleAdministrator      UserRole = "administrator"
	UserRoleDriver             UserRole = "driver"
	UserRolePassenger          UserRole = "passenger"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Car struct {
	ID        int32     `json:"id"`
	Plate     string    `json:"plate"`
	ModelID   int32     `json:"model_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Model struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type Schedule struct {
	ID            int32           `json:"id"`
	DepartureDate time.Time       `json:"departure_date"`
	DepartureTime time.Time       `json:"departure_time"`
	Pickup        json.RawMessage `json:"pickup"`
	Dropoff       json.RawMessage `json:"dropoff"`
	// When carpool confirmed
	DriverID sql.NullInt32 `json:"driver_id"`
	// When carpool confirmed
	CarID     sql.NullInt32 `json:"car_id"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type SchedulePassenger struct {
	ID          int32         `json:"id"`
	ScheduleID  sql.NullInt32 `json:"schedule_id"`
	PassengerID sql.NullInt32 `json:"passenger_id"`
	Gender      NullGender    `json:"gender"`
	Category    NullCategory  `json:"category"`
	Seat        sql.NullInt32 `json:"seat"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
}

type User struct {
	ID            int32          `json:"id"`
	Username      sql.NullInt32  `json:"username"`
	Password      string         `json:"password"`
	ContactNumber sql.NullString `json:"contact_number"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	RoleID        NullUserRole   `json:"role_id"`
}
