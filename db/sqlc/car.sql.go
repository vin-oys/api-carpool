// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: car.sql

package db

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO "car" (plate_id, pax)
VALUES ($1, $2)
RETURNING plate_id, pax, created_at, updated_at
`

type CreateCarParams struct {
	PlateID string `json:"plate_id"`
	Pax     int32  `json:"pax"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, createCar, arg.PlateID, arg.Pax)
	var i Car
	err := row.Scan(
		&i.PlateID,
		&i.Pax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE
FROM "car"
WHERE plate_id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, plateID string) error {
	_, err := q.db.ExecContext(ctx, deleteCar, plateID)
	return err
}

const listCars = `-- name: ListCars :many
SELECT plate_id, pax, created_at, updated_at
FROM "car"
ORDER BY plate_id
LIMIT $1 OFFSET $2
`

type ListCarsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCars(ctx context.Context, arg ListCarsParams) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, listCars, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Car{}
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.PlateID,
			&i.Pax,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCar = `-- name: UpdateCar :one
UPDATE "car"
SET pax = $2
WHERE plate_id = $1
RETURNING plate_id, pax, created_at, updated_at
`

type UpdateCarParams struct {
	PlateID string `json:"plate_id"`
	Pax     int32  `json:"pax"`
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCar, arg.PlateID, arg.Pax)
	var i Car
	err := row.Scan(
		&i.PlateID,
		&i.Pax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
