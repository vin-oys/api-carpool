// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, password, contact_number, role_id)
VALUES ($1, $2, $3, $4)
RETURNING id, username, created_at, role_id
`

type CreateUserParams struct {
	Username      string   `json:"username"`
	Password      string   `json:"password"`
	ContactNumber string   `json:"contact_number"`
	RoleID        UserRole `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserCreateResponse, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.ContactNumber,
		arg.RoleID,
	)
	var i UserCreateResponse
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, firstname, lastname, contact_number, created_at, updated_at, role_id
FROM "user"
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, firstname, lastname, contact_number, created_at, updated_at, role_id
FROM "user"
ORDER BY role_id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	RoleID UserRole `json:"role_id"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]UserList, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserList{}
	for rows.Next() {
		var i UserList
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.ContactNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET contact_number = $2
WHERE username = $1
RETURNING id, username, updated_at, role_id
`

type UpdateUserParams struct {
	Username      string `json:"username"`
	ContactNumber string `json:"contact_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UserUpdateResponse, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Username, arg.ContactNumber)
	var i UserUpdateResponse
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "user"
SET password = $2
WHERE username = $1
RETURNING id, username, password, firstname, lastname, contact_number, created_at, updated_at, role_id
`

type UpdateUserPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (UserUpdateResponse, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.Username, arg.Password)
	var i UserUpdateResponse
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE "user"
SET role_id = $2
WHERE username = $1
RETURNING id, username, password, firstname, lastname, contact_number, created_at, updated_at, role_id
`

type UpdateUserRoleParams struct {
	Username string   `json:"username"`
	RoleID   UserRole `json:"role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserUpdateResponse, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, arg.Username, arg.RoleID)
	var i UserUpdateResponse
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}
