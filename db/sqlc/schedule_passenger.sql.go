// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: schedule_passenger.sql

package db

import (
	"context"
	"database/sql"
)

const createSchedulePassenger = `-- name: CreateSchedulePassenger :one
INSERT INTO "schedule_passenger" (passenger_id, category)
VALUES ($1, $2)
RETURNING id, schedule_id, passenger_id, category, seat, created_at, updated_at
`

type CreateSchedulePassengerParams struct {
	PassengerID int32    `json:"passenger_id"`
	Category    Category `json:"category"`
}

func (q *Queries) CreateSchedulePassenger(ctx context.Context, arg CreateSchedulePassengerParams) (SchedulePassenger, error) {
	row := q.db.QueryRowContext(ctx, createSchedulePassenger, arg.PassengerID, arg.Category)
	var i SchedulePassenger
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.PassengerID,
		&i.Category,
		&i.Seat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchedulePassenger = `-- name: DeleteSchedulePassenger :exec
DELETE
FROM "schedule_passenger"
WHERE id = $1
`

func (q *Queries) DeleteSchedulePassenger(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchedulePassenger, id)
	return err
}

const getSchedulePassenger = `-- name: GetSchedulePassenger :one
SELECT id, schedule_id, passenger_id, category, seat, created_at, updated_at
FROM "schedule_passenger"
WHERE id = $1
`

func (q *Queries) GetSchedulePassenger(ctx context.Context, id int32) (SchedulePassenger, error) {
	row := q.db.QueryRowContext(ctx, getSchedulePassenger, id)
	var i SchedulePassenger
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.PassengerID,
		&i.Category,
		&i.Seat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSchedulePassengers = `-- name: ListSchedulePassengers :many
SELECT id, schedule_id, passenger_id, category, seat, created_at, updated_at
FROM "schedule_passenger"
ORDER BY schedule_id
LIMIT $1 OFFSET $2
`

type ListSchedulePassengersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSchedulePassengers(ctx context.Context, arg ListSchedulePassengersParams) ([]SchedulePassenger, error) {
	rows, err := q.db.QueryContext(ctx, listSchedulePassengers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SchedulePassenger{}
	for rows.Next() {
		var i SchedulePassenger
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.PassengerID,
			&i.Category,
			&i.Seat,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassengerSchedule = `-- name: UpdatePassengerSchedule :one
UPDATE "schedule_passenger"
SET schedule_id = $2
WHERE passenger_id = $1
RETURNING id, schedule_id, passenger_id, category, seat, created_at, updated_at
`

type UpdatePassengerScheduleParams struct {
	PassengerID int32         `json:"passenger_id"`
	ScheduleID  sql.NullInt32 `json:"schedule_id"`
}

func (q *Queries) UpdatePassengerSchedule(ctx context.Context, arg UpdatePassengerScheduleParams) (SchedulePassenger, error) {
	row := q.db.QueryRowContext(ctx, updatePassengerSchedule, arg.PassengerID, arg.ScheduleID)
	var i SchedulePassenger
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.PassengerID,
		&i.Category,
		&i.Seat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassengerSeat = `-- name: UpdatePassengerSeat :one
UPDATE "schedule_passenger"
SET seat = $2
WHERE passenger_id = $1
RETURNING id, schedule_id, passenger_id, category, seat, created_at, updated_at
`

type UpdatePassengerSeatParams struct {
	PassengerID int32         `json:"passenger_id"`
	Seat        sql.NullInt32 `json:"seat"`
}

func (q *Queries) UpdatePassengerSeat(ctx context.Context, arg UpdatePassengerSeatParams) (SchedulePassenger, error) {
	row := q.db.QueryRowContext(ctx, updatePassengerSeat, arg.PassengerID, arg.Seat)
	var i SchedulePassenger
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.PassengerID,
		&i.Category,
		&i.Seat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
